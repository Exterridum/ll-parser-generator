/* The following code was generated by JFlex 1.4.3 on 12/5/09 5:41 PM */

package parser3240;

import java.util.ArrayList;
/**
 * This class is a lexer for the TINY language
 */

class TINYLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\10\3\0"+
    "\1\7\1\36\2\0\1\31\1\32\1\35\1\30\1\34\1\12\2\0"+
    "\1\11\11\5\1\26\1\33\1\0\1\27\3\0\32\4\4\0\1\6"+
    "\1\0\1\23\1\14\1\4\1\21\1\15\1\4\1\16\1\4\1\17"+
    "\4\4\1\20\1\4\1\24\1\4\1\22\1\4\1\25\6\4\1\0"+
    "\1\13\2\0\41\7\2\0\4\7\4\0\1\7\2\0\1\7\7\0"+
    "\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u013f\7\31\0"+
    "\162\7\4\0\14\7\16\0\5\7\11\0\1\7\21\0\130\7\5\0"+
    "\23\7\12\0\1\7\13\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\54\7\1\0\46\7\1\0\5\7\4\0\202\7\1\0"+
    "\4\7\3\0\105\7\1\0\46\7\2\0\2\7\6\0\20\7\41\0"+
    "\46\7\2\0\1\7\7\0\47\7\11\0\21\7\1\0\27\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\7\5\0"+
    "\3\7\15\0\4\7\14\0\6\7\13\0\32\7\5\0\31\7\7\0"+
    "\12\7\4\0\146\7\1\0\11\7\1\0\12\7\1\0\23\7\2\0"+
    "\1\7\17\0\74\7\2\0\3\7\60\0\62\7\u014f\0\71\7\2\0"+
    "\22\7\2\0\5\7\3\0\14\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\2\0\11\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\7\1\0\5\7\2\0\16\7\15\0\3\7\1\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\7\1\0\1\7\7\0\17\7\14\0\3\7\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\12\7\1\0\3\7\1\0\3\7\2\0\1\7\17\0\4\7\2\0"+
    "\12\7\1\0\1\7\17\0\3\7\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\10\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\7\1\0\3\7\4\0"+
    "\12\7\1\0\1\7\20\0\2\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\10\7\1\0\3\7\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\11\0\1\7\17\0\11\7\11\0\1\7\7\0\3\7\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\7\4\0"+
    "\12\7\22\0\2\7\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\2\0\11\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\7\1\0\2\7\4\0\12\7\22\0\2\7\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\20\7\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\7\4\0\12\7\22\0"+
    "\2\7\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0"+
    "\7\7\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\72\7\4\0\20\7\1\0\12\7\47\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0"+
    "\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0"+
    "\15\7\1\0\3\7\2\0\5\7\1\0\1\7\1\0\6\7\2\0"+
    "\12\7\2\0\2\7\42\0\1\7\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\12\7\1\0\42\7\6\0"+
    "\24\7\1\0\6\7\4\0\10\7\1\0\44\7\11\0\1\7\71\0"+
    "\42\7\1\0\5\7\1\0\2\7\1\0\7\7\3\0\4\7\6\0"+
    "\12\7\6\0\12\7\106\0\46\7\12\0\51\7\7\0\132\7\5\0"+
    "\104\7\5\0\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0"+
    "\1\7\1\0\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0"+
    "\27\7\1\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\47\7\1\0\23\7\16\0\11\7\56\0\125\7\14\0\u026c\7\2\0"+
    "\10\7\12\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0"+
    "\7\7\13\0\25\7\13\0\24\7\14\0\15\7\1\0\3\7\1\0"+
    "\2\7\14\0\124\7\3\0\1\7\3\0\3\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\7\10\0\52\7\126\0\35\7\3\0"+
    "\14\7\4\0\14\7\12\0\50\7\2\0\5\7\u038b\0\154\7\224\0"+
    "\234\7\4\0\132\7\6\0\26\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\17\0\4\7\32\0\5\7\20\0\2\7\23\0\1\7\13\0"+
    "\4\7\6\0\6\7\1\0\1\7\15\0\1\7\40\0\22\7\36\0"+
    "\15\7\4\0\1\7\3\0\6\7\27\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\3\7\1\0\7\7\3\0\3\7\5\0"+
    "\5\7\26\0\44\7\u0e81\0\3\7\31\0\17\7\1\0\5\7\2\0"+
    "\5\7\4\0\126\7\2\0\2\7\2\0\3\7\1\0\137\7\5\0"+
    "\50\7\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0"+
    "\u51a6\7\132\0\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0"+
    "\7\7\14\0\5\7\5\0\14\7\1\0\15\7\1\0\5\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0"+
    "\100\7\2\0\66\7\50\0\15\7\3\0\20\7\20\0\4\7\17\0"+
    "\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0"+
    "\1\7\4\0\1\7\13\0\12\7\7\0\32\7\4\0\1\7\1\0"+
    "\32\7\12\0\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0"+
    "\3\7\3\0\2\7\3\0\2\7\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\0\1\3\1\4\1\0"+
    "\4\2\1\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\4\2\1\14\1\2\1\15\3\2\1\16\1\2"+
    "\1\17\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\76\0\272"+
    "\0\272\0\331\0\370\0\u0117\0\u0136\0\u0155\0\272\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\76\0\u01f0\0\135\0\u020f\0\u022e\0\u024d\0\135"+
    "\0\u026c\0\135\0\135";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\6\1\0\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\4\4\1\14\1\4"+
    "\1\15\1\4\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\3\77\0\6\4\1\0"+
    "\13\4\16\0\1\5\3\0\1\5\31\0\2\4\3\0"+
    "\1\4\2\0\12\4\16\0\1\5\3\0\1\7\2\11"+
    "\14\0\1\11\12\0\6\4\1\0\2\4\1\26\10\4"+
    "\15\0\6\4\1\0\5\4\1\27\5\4\15\0\6\4"+
    "\1\0\2\4\1\30\10\4\15\0\6\4\1\0\7\4"+
    "\1\31\3\4\40\0\1\32\13\0\6\4\1\0\3\4"+
    "\1\33\7\4\15\0\6\4\1\0\6\4\1\34\4\4"+
    "\15\0\6\4\1\0\10\4\1\35\2\4\15\0\6\4"+
    "\1\0\4\4\1\36\6\4\15\0\6\4\1\0\4\4"+
    "\1\37\6\4\15\0\6\4\1\0\6\4\1\40\4\4"+
    "\15\0\6\4\1\0\5\4\1\41\5\4\15\0\6\4"+
    "\1\0\5\4\1\42\5\4\15\0\6\4\1\0\12\4"+
    "\1\43\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[651];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\2\1\1\0\1\11\1\1\1\0"+
    "\4\1\1\0\1\1\6\11\4\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TINYLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TINYLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1616) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    setZzAtEOF(true);            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    setZzAtEOF(false);
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (isZzAtEOF()) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [32] { return \"ID\"; }");
          { return "ID";
          }
        case 17: break;
        case 9: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [45] { return \"COMMA\"; }");
          { return "COMMA";
          }
        case 18: break;
        case 16: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [30] { return \"PRINT\"; }");
          { return "PRINT";
          }
        case 19: break;
        case 1: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [51] { /* ignore */ }");
          { /* ignore */
          }
        case 20: break;
        case 4: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [41] { return \"MINUS\"; }");
          { return "MINUS";
          }
        case 21: break;
        case 7: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [43] { return \"RIGHTPAR\"; }");
          { return "RIGHTPAR";
          }
        case 22: break;
        case 5: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [40] { return \"PLUS\"; }");
          { return "PLUS";
          }
        case 23: break;
        case 6: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [42] { return \"LEFTPAR\"; }");
          { return "LEFTPAR";
          }
        case 24: break;
        case 8: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [44] { return \"SEMICOLON\"; }");
          { return "SEMICOLON";
          }
        case 25: break;
        case 14: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [29] { return \"READ\"; }");
          { return "READ";
          }
        case 26: break;
        case 12: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [38] { return \"ASSIGN\"; }");
          { return "ASSIGN";
          }
        case 27: break;
        case 3: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [35] { return \"INTNUM\"; }");
          { return "INTNUM";
          }
        case 28: break;
        case 11: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [47] { return \"PERCENT\"; }");
          { return "PERCENT";
          }
        case 29: break;
        case 10: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [46] { return \"STAR\"; }");
          { return "STAR";
          }
        case 30: break;
        case 15: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [27] { return \"BEGIN\"; }");
          { return "BEGIN";
          }
        case 31: break;
        case 13: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [28] { return \"END\"; }");
          { return "END";
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            setZzAtEOF(true);
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
  /*
   * Gets a lexer for the file at the given path if the 
   */
  public static TINYLexer GetLexer(String path){
	  	TINYLexer scanner = null;     
   
        try {
          scanner = new TINYLexer( new java.io.FileReader(path) );

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+path+"\"");
	    }
	    catch (java.io.IOException e) {
	      System.out.println("IO error scanning file \""+path+"\"");
	      System.out.println(e);
	    }
	    catch (Exception e) {
	      System.out.println("Unexpected exception:");
	      e.printStackTrace();
	    }
	    
	    return scanner;	     
  }
  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java TINYLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        TINYLexer scanner = null;
        try {
          scanner = new TINYLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.isZzAtEOF());

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }

private void setZzAtEOF(boolean zzAtEOF) {
	this.zzAtEOF = zzAtEOF;
}

public boolean isZzAtEOF() {
	return zzAtEOF;
}


}
